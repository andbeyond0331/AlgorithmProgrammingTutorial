package main.java.AlgorithmProgrammingTutorial.Lesson2;

//2022-03-23 시작

// 알고리즘의 시작 '정렬'

// 정렬만큼 알고리즘의 효율성 차이를 극명하게 보여주는 것이 없음

// 문제 1.
// 다음의 숫자들을 오름차순으로 정렬하는 프로그램을 작성하세요.

// 1 10 5 8 7 6 4 3 2 9

// 가장 직관적인 접근 방법은 '선택 정렬' - 가장 작은 것을 제일 앞으로 보내는 개념

// 알고리즘은 소스코드부터 만지는 것이 아니라 반드시 손으로 먼저 간단한 수식이나 알고리즘 테스트를 한 후
// 그걸 소스코드로 옮기는 것이 가장 효율적

// 1 10 5 8 7 6 4 3 2 9

// 1 2 5 8 7 6 4 3 9 10

// 1 2 3 5 8 7 6 4 10 9

// 1 2 3 4 8 7 6 5 10 9

// 1 2 3 4 5 7 6 8 10 9

// 1 2 3 4 5 6 7 8 10 9

// 1 2 3 4 5 6 7 8 9 10


import java.util.ArrayList;
import java.util.List;

public class SelectionSort {

    public static void main(String[] args) {

        // 111111

        // 가장 작은 것을 선택해서 제일 앞으로 보내면 어떨까?

        int[] array = {1,10,5,8,7,6,4,3,2,9};

        int min;
        int index=0;
        int temp;

        for (int i = 0; i < 10; i++) {
            min = 9999; //모든 원소들보다 더 큰 숫자
            for (int j = i; j < 10; j++) {
                if(min > array[j]){
                    min = array[j];
                    index = j;
                }
            }
            //아래 세 줄이 '스와핑' 두 원소를 바꿔주는 것
            temp = array[i]; //(가장 앞에 있는 값)
            array[i] = min;
            array[index] = temp;
        }
        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i] + " ");
            System.out.printf("%d \n",array[i]);
        }

        // 여기서 중요한 것 : 선택정렬이 얼마나 많은 시간을 잡아먹는가

        // 맨 처음 1-10 확인해야 함 10번
        // 2-10 9번
        // 3-10 8번
        // 4-10 7번
        // 5-10 6번
        // 6-10 5번
        // 7-10 4번
        // 8-10 3번
        // 9-10 2번
        // 10-10 1번

        // 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1
        // 등차수열
        // 10 * (10 + 1 ) / 2 = 55

        // N * (N + 1) / 2

        // 컴퓨터에서는 나눈 값이나 특정 숫자를 더하고 빼는 것은 N이 무한히 크다는 가정 하에 모두 무시함
        // N * N : 대략적으로 n 곱하기 n 의 수행시간을 가지고 있다

        // 이 때 사용되는 것이 빅 오 표기법
        // O(N * N)

        // 특정한 알고리즘의 수행 시간을 가장 간략하게 표현하는 것이 빅 오 표기법
        // 특정 알고리즘의 총 연산 횟수를 간략하게 표현


        // 선택 정렬의 시간 복잡도는 O(N^2)

        // 다시 말해 정렬해야 할 데이터 갯수가 10000개라면 일 억 번 정도 계산하는 것









    }
}